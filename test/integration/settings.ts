/**
 * Important
 *
 * Do not edit this file, put your configuration in <project_root>/integration-settings.js.
 *
 * Use <project_root>/integration-settings.sample.js as a template and follow the instructions.
 */
import { URL } from 'url';
import { networkInterfaces } from 'os';

const externalIPv4Networks = Object.values(networkInterfaces()).flat()
  .filter(net => net?.family === 'IPv4' && !net.internal);
const externalIPAddress: string | undefined = externalIPv4Networks[0]?.address;

const port = 3344;
const endpoint: string = externalIPAddress != null && externalIPAddress
  ? `http://${externalIPAddress}:${port}`
  : `http://my-server.com:${port}`;

export interface SettingsIntegration {
  notificationServer: {
    port: number
  }
  redirectData: {
    merchantURL: string
    successURL: string
    errorURL: string
  }
  threeDS: {
    methodURL: string
    challengeV1URL: string
    challengeV2URL: string
  }
}

const settings: SettingsIntegration = {
  notificationServer: {
    port
  },
  redirectData: {
    merchantURL: new URL('/notification', endpoint).toString(),
    successURL: new URL('/success', endpoint).toString(),
    errorURL: new URL('/error', endpoint).toString()
  },
  threeDS: {
    methodURL: new URL('/notification-3ds-method', endpoint).toString(),
    challengeV1URL: new URL('/post-challenge-v1', endpoint).toString(),
    challengeV2URL: new URL('/post-challenge-v2', endpoint).toString()
  }
};

try {
  // eslint-disable-next-line @typescript-eslint/no-require-imports -- must be dynamic and synchronous
  const overrideSettings = require('../../integration-settings') as Partial<typeof settings>;

  // Override settings
  Object.assign(settings, overrideSettings);
  Object.entries(overrideSettings).forEach(([entryKey, overrideEntryConfig]) => {
    if (!(entryKey in settings)) {
      throw new Error(`Unknown settings entry key ${entryKey}`);
    }

    const entryConfig = (settings as unknown as Record<string, Record<string, string>>)[entryKey] as Record<string, string>;

    (Object.entries(overrideEntryConfig) as ReadonlyArray<[string, string]>).forEach(
      ([configKey, configValue]) => {
        if (!(configKey in entryConfig)) {
          throw new Error(`Unknown config key ${configKey}`);
        }

        entryConfig[configKey] = configValue;
      }
    );
  });
} catch (err) {
  console.error(err);
}

export default settings;
